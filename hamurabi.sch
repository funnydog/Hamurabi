;;; hamurabi.sch
(format #t "~80:@<~a~>~%" "HAMURABI")
(format #t "~80:@<~a~>~%~%~%" "CREATIVE COMPUTING - MORRISTOWN, NEW JERSEY")
(format #t "~80:@<~a~>~%" "Try your hand at governing ancient Sumeria")
(format #t "~80:@<~a~>~%~%" "for a ten-year term of office.")

;; global mutable variables
(define *harvest* 3000)
(define *seeds* 2800)
(define *rats* (- *harvest* *seeds*))
(define *dead* 0)
(define *incoming* 5)
(define *people* (+ 95 *incoming* *dead*))
(define *seeds-per-acre* 3)
(define *acres* (fx/ *harvest* *seeds-per-acre*))
(define *plague* #f)

;; stats
(define *fraction-starved* 0.0)
(define *total-dead* 0)

(define (show-report year)
  (format #t "~%~%~%Hamurabi: I Beg To Report To You,~%")
  (format #t "In year ~a, ~a people starved, ~a came to the city.~%" year *dead* *incoming*)
  (when *plague*
    (format #t "A horrible plague struck! Half of the people died.~%"))
  (format #t "Population is now ~a.~%" *people*)
  (format #t "The city now owns ~a acres.~%" *acres*)
  (format #t "You harvested ~a bushels per acre.~%" *seeds-per-acre*)
  (format #t "The rats ate ~a bushels.~%" *rats*)
  (format #t "You now have ~a bushels in store.~%~%" *seeds*)
  #t)

(define (any->fixnum value)
  (cond ((fixnum? value) value)
        ((flonum? value) (flonum->fixnum value))
        ((string? value) (any->int (string->number value)))
        (else -1)))

(define (read-int prompt)
  (format #t "~a " prompt)
  (let ((value (any->fixnum (read))))
    (cond ((< value 0)
           (format #t "Hamurabi: I cannot do what you wish. Get yourself another steward!!!~%")
           (exit))
          (else value))))

(define (buy-acres)
  (let ((value (read-int "How many acres do you wish to buy?")))
    (cond ((> (* *acre-value* value) *seeds*)
           (format #t "Hamurabi: Try again, you have only ~a bushels of grain. Now then,~%" *seeds*)
           (buy-acres))
          (else value))))

(define (sell-acres)
  (let ((value (read-int "How many acres do you wish to sell?")))
    (cond ((> value *acres*)
           (format #t "Hamurabi: Try again, you have only ~a bushels of grain. Now then,~%" *seeds*)
           (sell-acres))
          (else value))))

(define (feed-bushels)
  (let ((value (read-int "How many bushels do you wish to feed your people?")))
    (cond ((> value *seeds*)
           (format #t "Hamurabi: Try again, you have only ~a bushels of grain. Now then,~%" *seeds*)
           (feed-bushels))
          (else value))))

(define (plant-acres)
  (let ((value (read-int "How many acres do you wish to plant with seeds?")))
    (cond ((> value *acres*)
           (format #t "Hamurabi: Think again. You only own ~a acres. Now then,~%" *acres*)
           (plant-acres))
          ((> (fx/ value 2) *acres*)
           (format #t "Hamurabi: Think again. You have only ~a bushels of grain. Now then,~%" *seeds*)
           (plant-acres))
          ((> value (* 10 *people*))
           (format #t "Hamurabi: But you have only ~a people to tend the fields! Now then,~%" *people*)
           (plant-acres))
          (else
           value))))

(define (randint . args)
  (cond ((= (length args) 1)
         (random (car args)))
        ((= (length args) 2)
         (+ (car args)
            (random (- (cadr args) (car args)))))
        (else
         (error 'randint "usage: (randing [low] high)"))))

(define *acre-value* 0)
(define (yearloop year endyear)
  (when (< year endyear)
    (show-report year)
    (set! *acre-value* (randint 17 27))

    (let ((buy (buy-acres)))
      (set! *acres* (+ *acres* buy))
      (set! *seeds* (- *seeds* (* *acre-value* buy))))

    (let ((sell (sell-acres)))
      (set! *acres* (- *acres* sell))
      (set! *seeds* (+ *seeds* (* *acre-value* sell))))

    (let ((feed (feed-bushels)))
      (set! *seeds* (- *seeds* feed))
      (let ((plant (plant-acres)))
        (set! *seeds* (- *seeds* (fx/ plant 2)))
        (set! *seeds-per-acre* (randint 1 7))
        (set! *harvest* (* plant *seeds-per-acre*))
        (set! *rats*
          (let ((rat-odds (randint 1 7)))
            (if (odd? rat-odds) (fx/ *seeds* rat-odds) 0)))
        (set! *seeds* (- (+ *seeds* *harvest*)
                         *rats*))
        (set! *incoming* (+ 1
                            (fx/ (* (randint 1 7)
                                    (+ *seeds* (* *acres* 20)))
                                 (* *people* 100))))

        (set! *dead* (let ((people_fed (fx/ feed 20)))
                       (if (> *people* people_fed)
                           (- *people* people_fed)
                           0)))

        (when (> (* *dead* 100) (* *people* 45))
          (format #t "You starved ~a people in one year!!!~%" *dead*)
          (format #t "Due to this extreme mismanagement you have not only~%")
          (format #t "been impeached and thrown out of office but you have~%")
          (format #t "also been declared national fink!!!~%")
          (exit))

        (set! *fraction-starved* (/ (+ (* (- year 1) *fraction-starved*)
                                      (/ *dead* *people*))
                                   year))
        (set! *total-dead* (+ *total-dead* *dead*))
        (set! *people* (- (+ *people* *incoming*) *dead*))

        (set! *plague* (< (randint 20) 3))
        (when *plague*
          (set! *people* (fx/ *people* 2)))))

    (yearloop (+ year 1) endyear)))

;; main program
(random-seed (time-second (current-time)))
(yearloop 1 11)
(show-report 11)

;; print the outcome
(let ((avg-acres (/ *acres* *people*)))
  (format #t "In your 10-year term of office ~,2,2f percent of the~%" *fraction-starved*)
  (format #t "population starved per year on average, i.e. a~%")
  (format #t "total of ~a people died!!!~%" *total-dead*)
  (format #t "You started with 10 acres per person and ended with~%")
  (format #t "~,2f acres per person~%~%" avg-acres)
  (cond ((or (> *fraction-starved* 0.33)
             (< avg-acres 7))
         (format #t "Due to this extreme mismanagement you have not only~%")
         (format #t "been impeached and thrown out of office but you have~%")
         (format #t "also been declared national fink!!!~%"))
        ((or (> *fraction-starved* 0.10)
             (< avg-acres 9))
         (format #t "Your heavy-handed performance smaks of Nero and Ivan IV.~%")
         (format #t "The people (remaining) find you an unpleasant ruler, and,~%")
         (format #t "frankly, hate your guts!!!~%"))
        ((or (> *fraction-starved* 0.03)
             (< avg-acres 10))
         (let ((haters (flonum->fixnum (* (random 0.8) *people*))))
           (format #t "Your performance could have been somewhat better, but~%")
           (format #t "really wasn't too bad at all. ~a people would dearly~%" haters)
           (format #t "like to see you assassinated but we all have our~%")
           (format #t "trivial problems.~%")))
        (else
         (format #t "A fantastic performance!!! Charlemagne, Disraeli and~%")
         (format #t "Jefferson combined could not have done better!~%"))))
(exit)
